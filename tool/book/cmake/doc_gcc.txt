### GCC   

GCC 使用的命令语法如下：   
4.1 输入选项   
gcc [选项] 输入的文件名   
常用选项：   
   
-o：   
小写字母“o”，指定生成的可执行文件的名字，不指定的话生成的可执行文件名为 a.out。   
-E：   
只进行预处理，既不编译，也不汇编。   
-S：   
只编译，不汇编。   
-c：   
编译并汇编，但不进行链接。    
-g：   
生成的可执行文件带调试信息，方便使用 gdb 进行调试。   
-Ox：   
 大写字母“O”加数字，设置程序的优化等级，如“-O0”“-O1”“-O2”“-O3”，数字越大代码的优化等级越高，编译出来的程序一般会越小，但有可能会导致程序不正常运行。    

4.2  gcc 符号解释   
$@   
 --代表目标文件(target)      
$^   
--代表所有的依赖文件(components)   
$<   
 --代表第一个依赖文件(components中最左边的那个)。   
$?   
--代表当前目标所依赖的文件列表中比当前目标文件还要新的文件。      
$*   
--不包括后缀名的当前依赖文件的名字   

4.3 编译路径指定   
-I ( i 的大写)：   
指定头文件路径（相对路径或绝对路径，建议相对路径）   
-i ：   
指定头文件名字 (一般不使用，而是直接放在**.c 文件中通过#include<***.h> 添加)   
-L ：   
指定连接的动态库或者静态库路径（相对路径或绝对路径，建议相对路径）   
-l (L的小写)：   
指定需要链接的库的名字（链接 libc.a : -lc 链接动态库：libc.so : -lc）。 注意：-l后面可以直接添加库名省去“lib”和“.so”或“.a”。 -l(L的小写)链接的到底是动态库还是静态库，如果链接路径下同时有 .so 和 .a 那优先链接 .so 。   

4.4 动态库、静态库编译   
编译动态库   
gcc -shared -o libexample.so example.c   
编译静态库   
gcc -c example.c   
ar rcs libexample.a example.o   
使用动态库编译    
libabc.so(下面的编译命令不带lib和so,只添加了-l)   
gcc main.c -o main  -L （动态库目录）  -labc    

4.5 运行设置库路径   
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/the/path/you/want/set    

4.6 查看编译文件库依赖   
lld xxx.so 查看库依赖   
   
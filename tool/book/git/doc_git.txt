## git 使用说明   
   
### git操作部分   
1.1 普通操作   
1.1.1 git用户建立   
用户配置   
git config --global user.name "用户名"    
git config --global user.email "邮箱" 第一次配置    
    
查看配置   
git config --global --list   
    
生成密钥    
ssh-keygen -t rsa -C '邮箱' 并按回车3下    
windows就是C:\Users\Administrator  
linux 用户目录下.ssh/id_rsa.pub id_rsas    
   


1.1.2 克隆仓库   
git clone https://github.com/apache/brpc.git   
// 浅克隆，只克隆最近一次提交   
git clone --depth 1 https://github.com/apache/brpc.git   
// 后续多次克隆   
cd brpc   
git fetch --deepen=50   
先生成链接，后续一层层克隆   
mkdir brpc && cd brpc   
git init   
git remote add origin https://github.com/apache/brpc.git   
git fetch --depth 1  # 或根据你的需要增加更多深度   
git checkout -b master origin/master   
   

   
1.1.3 分支切换   
git branch -a 看分支    
git checkout origin xxx 切分支    
   


1.1.4 协议更改   
更改https协议为ssh   
git remote set-url origin 地址   
    


查看协议   
1. 查看当前的远程 URL：运行以下命令来查看当前配置的远程仓库 URL：   
git remote -v   
通常看到的结果类似这样：   
origin  https://github.com/username/repository.git (fetch)   
origin  https://github.com/username/repository.git (push)   
2. 更改远程 URL 到 SSH：使用以下 git remote set-url 命令来更改远程 URL：   
git remote set-url origin git@github.com:username/repository.git   
替换 git@github.com:username/repository.git 为你的实际 SSH URL。   
3. 验证更新是否成功：再次运行 git remote -v 确认远程 URL 是否更新成功。你应该会看到如下输出：   
origin  git@github.com:username/repository.git (fetch)   
origin  git@github.com:username/repository.git (push)   
    


1.1.5 git提交    
git add xxx(本地文件)    
git commit -m '本次提交注释'    
git push origin xxx（远程分支）   
    


1.1.6 删除远程    
一定要带cached 不然会删除本地    
git rm -r --cached xxx    
   


1.1.7 git 撤回   
撤销 commit -m    
git reset --soft HEAD^    
git reset --soft HEAD~1  最近一次   
撤销 git add.    
git reset HEAD    
git reset HEAD <file>  对单独文件撤回git add   
撤销 commit，撤销git add    
git reset --mixed HEAD^   
–mixed    
意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作    
这个为默认参数,git reset --mixed HEAD^ 和 git resest HEAD^ 效果是一样的。    
–soft    
不删除工作空间改动代码，撤销commit，不撤销git add .    
–hard    
删除工作空间改动代码，撤销commit，撤销git add .    
拉取分支命令 git clone xxx(ssh或者https地址)    
   
撤销 commit，撤销git add，撤回修改区   
 git reset --hard HEAD~1    
这个命令会彻底地撤销最近的一次提交，并且将工作目录和暂存区都恢复到指定提交的状态。   
   


1.1.7.1 逆转（保留历史记录）   
git revert（推荐用于公共分支）   
新建一个分支，这个分支撤回原分支上次、或多次提交   
如果你的提交已经推送或者你正在处理公共分支上，使用git revert创建一个新的提交来“逆转”之前的提交更为安全，这不会改变项目历史。   
git revert HEAD   
这将创建一个新提交，内容是上一个提交的逆。这样做的好处是，不会更改项目的历史记录，因此适用于团队环境以及已经推送到远程仓库的提交。   
    

1.1.7.2 撤销（不保留历史记录）   
git commit --amend（如果你刚刚误提交了）   
取代前一个提交   
如果你刚刚进行了一次提交，然后意识到需要对那次提交做出一点小更改，你可以使用git commit --amend来修改那次提交而非创建一个新提交。   
git add <file>       先将需要修改的文件添加到暂存区   
git commit --amend   修改刚才的提交   
这将会打开文本编辑器，让你编辑提交信息，或者你也可以直接在命令中添加新的提交信息，如：   
git commit --amend -m "New commit message"   
    


1.1.8 分支合并   
1、避免覆盖本地，直接去dev merge自己分支，在dev合并冲突   
2、在自己分支开发完，pull最新的dev分支相当于（merge dev），自己分支解决冲突。然后再去dev merge自己分支。   
合并步骤：   
1、进入要合并的分支（如开发分支合并到master，则进入master目录）   
git pull   
2、查看所有分支是否都pull下来了   
git branch -a   
3、使用merge合并开发分支    
git merge 分支名   
4、查看合并之后的状态   
git status   
5、有冲突的话，通过IDE解决冲突（也就是文本编辑器手动修改成需要提交的）；   
    
6、解决冲突之后，将冲突文件提交暂存区   
git add 冲突文件   
7、提交merge之后的结果   
git commit   
如果不是使用git commit -m "备注" ，那么git会自动将合并的结果作为备注，提交本地仓库；   
8、本地仓库代码提交远程仓库   
git push   
git将分支合并到分支，将master合并到分支的操作步骤是一样的；   
可以使用idea git相关组件来解决冲突   
   
合并例子   
// 切换到 master 分支   
git checkout master   
git pull origin master   
// 将第一个补丁分支合并到 master   
git merge origin/master-patch-a7bf   
// 将第二个补丁分支合并到 master   
git merge origin/master-patch-a7bf-patch-10ab   
// 将更改推送到远程 master 分支   
git push origin master   
    
   
1.1.10 解决冲突   
1、冲突，别人部分提交过   
先add   
再commit   
最后pull 云端，再push，云端会merge   
    
2、云端和本地历史记录不一样   
(1)合并（Merge）: 如果你希望保留分叉的历史，可以执行以下命令：   
bashCopy code   
git pull origin main --no-rebase    
或者你可以配置默认行为为合并：   
bashCopy code   
git config pull.rebase false   
    
(2)变基（Rebase）: 如果你想让你的本地提交在远程提交之后，可以执行：   
bashCopy code   
git pull origin main --rebase    
或者你可以配置默认行为为变基：   
bashCopy code   
git config pull.rebase true   
    
(3)仅快进（Fast-forward only）: 如果你只想执行快进合并（fast-forward），可以执行：   
bashCopy code   
git pull origin main --ff-only    
或者你可以配置默认行为为仅快进：   
bashCopy code   
git config pull.ff only   
    
(4)以本地为准   
git push origin main --force   
git push origin main -f   
以云端为准   
git fetch --all   
git reset --hard origin/main   
     


1.1.11 git fetch操作   
git fetch 是 Git 版本控制系统中的一个命令，它的作用是从远程仓库下载本地仓库中缺少的数据。这个命令会获取远程仓库中当前分支的更新（如新的或更新的分支、标签等），但它不会改变你的工作目录中的文件，也就是说，它不会自动合并或修改你当前的工作进度。为了整合这些新的更新，你需要使用 git merge 或 git rebase 命令。   
以下是 git fetch 一些常用的用法：   
git fetch origin ：来更新远程仓库 origin 的所有分支信息。origin 是远程仓库默认名称的一个常见占位符。   
git fetch origin master： 可以获取远程的 master 分支，但不会影响本地的 master 分支。   
git fetch --all ：获取所有远程的更新（包括所有的远程仓库和分支） 。   
git fetch 通常与 git pull 命令相比较。但不同于 git fetch，git pull 会自动获取远程分支的数据然后立即合并到当前分支。   
git fetch 的主要优点是允许用户查看更新内容，然后在合并到本地分支之前进行手动检查。   
在多人合作的项目中，定期运行 git fetch 是一个好习惯，这样可以保持本地仓库与远程仓库的同步，从而避免在提交自己的更改时发生冲突。在合并前，你还可以使用 git log 查看更新的提交记录，使用 git diff 等命令检查更新的内容。   
   


1.3 git log   
git log:    
显示完整的提交历史。   
git log -n <limit>:    
显示最新的<limit>条提交。例如，git log -n 5显示最新的5个提交。   
git log --oneline:    
一行显示一个提交，只包括哈希和提交信息。   
git log --graph:    
显示一个ASCII图形表示的分支合并历史。   
git log --author="<pattern>":   
只显示指定作者的提交。   
git log --since="2 weeks ago":    
显示最近两周内的提交。   
git log --until="yesterday":    
显示直到昨天的提交。   
git log --grep="<pattern>":    
只显示提交信息中包含指定模式的提交。   
git log <path>:    
只显示涉及到特定文件或目录的提交。   
git log <branch1>..<branch2>:    
显示两个分支点之间的提交，不包括<branch1>而只包括<branch2>上的提交。   
git log --no-merges:    
显示不包含合并提交的日志。   
   
   
   
